@use "variables" as *;

// Mixin für Web-Schriftstil (mobile + desktop)
@mixin font-style-web($element) {
  $mobile: map-get(map-get($font-styles, mobile), $element);
  $desktop: map-get(map-get($font-styles, desktop), $element);

  font-size: map-get($mobile, font-size);
  line-height: map-get($mobile, line-height);
  font-weight: map-get($mobile, font-weight);
  b,
  strong{
    font-weight: map-get($mobile, strong-weight);
  }

  @media (min-width: $break-point-master) {
    font-size: map-get($desktop, font-size);
    line-height: map-get($desktop, line-height);
    font-weight: map-get($desktop, font-weight);
    b,
    strong{
      font-weight: map-get($desktop, strong-weight);
    }
  }
}

// Mixin für Print-Schriftstil
@mixin font-style-print($element) {
  $print: map-get(map-get($font-styles, print), $element);

  font-size: map-get($print, font-size);
  line-height: map-get($print, line-height);
  font-weight: map-get($print, font-weight);
  b,
  strong{
    font-weight: map-get($print, strong-weight);
  }
}


// Definiere Container-Breiten
$container-widths: (
        standard: 960px,
        large: 1200px,
        max: 1920px
);

// Definiere Breakpoints für Media Queries
$breakpoints: (
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1200px,
        xxl: 1600px
);

@mixin srlp-grid-width($type: standard) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @if $type == full {
    max-width: none;
    margin-left: 0;
    margin-right: 0;
  } @else {
    max-width: map-get($container-widths, $type);
  }
}

// Functions
//Function pt convertor
@function px-to-pt($px) {
  @return $px * 0.75pt / 1;
}



// TODO CHECK IF USED
// Mixin für Container
@mixin container($type: "Default") {
  @if $type == "Default" {
    width: auto;
    max-width: none;
  } @else if $type == "Standard" {
    // Nutzt den Wert aus $container-widths
    max-width: map-get($container-widths, standard);
    width: 100%; // Sorgt für responsive Breite innerhalb des Containers
    margin-left: auto;
    margin-right: auto;
  } @else if $type == "Large" {
    // Nutzt den Wert aus $container-widths
    max-width: map-get($container-widths, large);
    width: 100%; // Sorgt für responsive Breite innerhalb des Containers
    margin-left: auto;
    margin-right: auto;
  } @else if $type == "Screen width" {
    // Volle Breite des Bildschirms
    width: 100%;
    max-width: none;
  } @else {
    // Fallback für ungültige Eingaben
    @warn "Ungültiger Typ #{$type} für das Container-Mixin.";
  }
}


